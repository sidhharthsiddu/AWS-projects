
Here’s a detailed project description for setting up a VPC with a NAT Gateway using AWS CloudFormation, tailored for your resume:

Project Title: Automated VPC Setup with NAT Gateway Using AWS CloudFormation

Objective: To automate the creation of a Virtual Private Cloud (VPC) with public and private subnets, including a NAT Gateway, using AWS CloudFormation.

Technologies Used:

AWS CloudFormation
Amazon VPC
NAT Gateway
Internet Gateway
Subnets
Route Tables
Security Groups
Description:

Implemented an automated solution for setting up a Virtual Private Cloud (VPC) with both public and private subnets using AWS CloudFormation. The setup included a NAT Gateway to enable secure internet access for instances in the private subnet.

Key Responsibilities:

CloudFormation Template Development:

Created a comprehensive AWS CloudFormation template to define and automate the creation of VPC resources, including subnets, route tables, security groups, and gateways.
Included parameters for customizable CIDR blocks, instance types, and key pairs, allowing flexibility in the infrastructure setup.
VPC and Subnet Configuration:

Configured the VPC with a specified CIDR block, and created both public and private subnets to separate resources based on security requirements.
Associated public subnets with an Internet Gateway to allow direct access to the internet.
NAT Gateway Setup:

Automated the deployment of a NAT Gateway in the public subnet to provide internet access for instances in the private subnet.
Configured route tables to direct traffic from the private subnet to the internet via the NAT Gateway.
Security and Network Configuration:

Defined security groups and network ACLs within the CloudFormation template to control inbound and outbound traffic for resources within the VPC.
Ensured secure communication between instances in different subnets by configuring appropriate security group rules.
Automation and Scalability:

Utilized CloudFormation’s intrinsic functions to automate the assignment of IP addresses, route table associations, and resource dependencies.
Tested the template for scalability, ensuring it could be reused for different environments with minimal adjustments.
Outcome:

Successfully automated the deployment of a fully functional VPC with NAT Gateway using AWS CloudFormation, streamlining the process of setting up secure and scalable network infrastructure. This project demonstrated the ability to automate complex AWS environments, reducing setup time and ensuring consistent configurations across multiple deployments.


Infrastructure as a Code:


AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to create a VPC with public and private subnets,
  an Internet Gateway, and a NAT Gateway.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR block for the VPC.

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: The CIDR block for the public subnet.

  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: The CIDR block for the private subnet.

  AvailabilityZone:
    Type: String
    Default: us-east-1a
    Description: The Availability Zone for the subnets.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: PrivateSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC

  PublicSubnetId:
    Description: The ID of the public subnet
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: The ID of the private subnet
    Value: !Ref PrivateSubnet

  NatGatewayId:
    Description: The ID of the NAT Gateway
    Value: !Ref NatGateway

Iac Code automatically generates Vpc with NAT Gateway 

